package com.hcl.mybank.service;

import java.util.Locale;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;

import com.hcl.mybank.dao.UserLoginDAO;
import com.hcl.mybank.model.User;
import com.hcl.mybank.exception.UserNotFoundException;
import com.hcl.mybank.service.UserLoginService;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

/**
 * Service class to validate user credentials
 * @author Kamal.Joshi
 */

@Service
public class UserLoginServiceImpl implements Validator {

	private static final Logger logger = Logger.getLogger(UserLoginServiceImpl.class.getName());

	/*@Autowired
	MessageSource messageSource;

	@Autowired
	private UserLoginDAO userDAO;

	public User validateLoginUser(User pUser) {
		User user = null;
		try {
			user = userDAO.validateLoginUser(pUser);
			if (pUser.getEmailId().equals(user.getEmailId()) && pUser.getPassword().equals(user.getPassword())) {
				user.setValidUser(true);
			} else {
				user.setValidUser(false);
			}
		} catch (DataAccessException ex) {
			Locale locale = new Locale("en", "IN");
			String errorMsg = messageSource.getMessage("error.bad.credentials", new Object[] {}, locale);
			logger.error(errorMsg, ex);
			throw new UserNotFoundException(errorMsg, ex);
		}
		return user;
	}*/
	
	@Autowired
    private UserService userService;

    @Override
    public boolean supports(Class<?> aClass) {
        return User.class.equals(aClass);
    }

    @Override
    public void validate(Object o, Errors errors) {
        User user = (User) o;

        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "username", "NotEmpty");
        if (user.getName().length() < 6 || user.getName().length() > 32) {
            errors.rejectValue("username", "Size.userForm.username");
        }
        if (userService.fetchUser((user.getEmail()) != null)) {
            errors.rejectValue("username", "Duplicate.userForm.username");
        }

        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "NotEmpty");
        if (user.getPassword().length() < 8 || user.getPassword().length() > 32) {
            errors.rejectValue("password", "Size.userForm.password");
        }

        if (!user.getPasswordConfirm().equals(user.getPassword())) {
            errors.rejectValue("passwordConfirm", "Diff.userForm.passwordConfirm");
        }
    }
}
