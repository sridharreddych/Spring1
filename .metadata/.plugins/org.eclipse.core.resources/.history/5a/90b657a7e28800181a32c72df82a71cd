package com.khoubyari.example.api.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ing.loan.exception.LoanOfferException;
import com.ing.loan.model.LoanOffer;
import com.khoubyari.example.constants.HotelConstants;
import com.khoubyari.example.domain.Hotel;
import com.khoubyari.example.exception.DataFormatException;
import com.khoubyari.example.service.HotelService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/*
 * Demonstrates how to set up RESTful API endpoints using Spring MVC
 */

@RestController
@RequestMapping(value = "/hotel")
@Api(tags = { "hotels" })
public class HotelController extends AbstractRestHandler {

	private static final Logger logger = Logger.getLogger(HotelController.class);

	@Autowired
	private HotelService hotelService;

	@RequestMapping(value = "book/your/hotel", method = RequestMethod.POST, consumes = { "application/json",
			"application/xml" }, produces = { "application/json", "application/xml" })
	@ApiOperation(value = "Creates hotel details in the table.", notes = "Returns the URL of the new resource in the Location header.")
	public ResponseEntity<Hotel> createHotel(@RequestBody Hotel hotel, HttpServletRequest request,
			HttpServletResponse response) {
		Hotel createdHotel = hotelService.createHotel(hotel);
		response.setHeader("Location", request.getRequestURL().append("/").append(createdHotel.getId()).toString());
		return new ResponseEntity<>(createdHotel, HttpStatus.ACCEPTED);
	}

	@RequestMapping(value = "/listof/allhotels", method = RequestMethod.GET, produces = { "application/json",
			"application/xml" })
	@ApiOperation(value = "Get List of all hotel using pagination.", notes = "You can provide maximum page number up to 100")
	public ResponseEntity<Page<Hotel>> getAllHotel(
			@ApiParam(value = "The page number", required = true) @RequestParam(value = "page", required = true, defaultValue = DEFAULT_PAGE_NUM) Integer page,
			@ApiParam(value = "Tha page size", required = true) @RequestParam(value = "size", required = true, defaultValue = DEFAULT_PAGE_SIZE) Integer size,
			HttpServletRequest request, HttpServletResponse response) {

		logger.info(HotelController.class.getName() + " - " + Thread.currentThread().getStackTrace()[1].getMethodName()
				+ "()-" + HotelConstants.ENTRY);
		Page<Hotel> pageHotel = hotelService.getAllHotels(page, size);
		logger.info(HotelController.class.getName() + " - " + Thread.currentThread().getStackTrace()[1].getMethodName()
				+ "()-" + HotelConstants.EXIT);
		return new ResponseEntity<Page<Hotel>>(pageHotel, HttpStatus.OK);

	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = { "application/json", "application/xml" })
	@ResponseStatus(HttpStatus.OK)
	@ApiOperation(value = "Get a single hotel.", notes = "You have to provide a valid hotel ID.")
	public @ResponseBody Hotel getHotel(
			@ApiParam(value = "The ID of the hotel.", required = true) @PathVariable("id") Long id,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		Hotel hotel = this.hotelService.getHotel(id);
		checkResourceFound(hotel);
		// todo: http://goo.gl/6iNAkz
		return hotel;
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.PUT, consumes = { "application/json",
			"application/xml" }, produces = { "application/json", "application/xml" })
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value = "Update a hotel resource.", notes = "You have to provide a valid hotel ID in the URL and in the payload. The ID attribute can not be updated.")
	public void updateHotel(
			@ApiParam(value = "The ID of the existing hotel resource.", required = true) @PathVariable("id") Long id,
			@RequestBody Hotel hotel, HttpServletRequest request, HttpServletResponse response) {
		checkResourceFound(this.hotelService.getHotel(id));
		if (id != hotel.getId()) {
			throw new DataFormatException("ID doesn't match!");
		}
		this.hotelService.updateHotel(hotel);

	}

	// todo: @ApiImplicitParams, @ApiResponses
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = { "application/json",
			"application/xml" })
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value = "Delete a hotel resource.", notes = "You have to provide a valid hotel ID in the URL. Once deleted the resource can not be recovered.")
	public void deleteHotel(
			@ApiParam(value = "The ID of the existing hotel resource.", required = true) @PathVariable("id") Long id,
			HttpServletRequest request, HttpServletResponse response) {
		checkResourceFound(this.hotelService.getHotel(id));
		this.hotelService.deleteHotel(id);
	}
}
